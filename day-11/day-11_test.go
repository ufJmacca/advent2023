package main

import (
	"fmt"
	"reflect"
	"testing"
)

type puzzle_input_1 struct {
	input  string
	result int
}

type grid_expansion struct {
	input  [][]string
	result [][]string
}

type shortest_path struct {
	grid   [][]string
	start  coords
	end    coords
	result int
}

func TestPuzzle1(t *testing.T) {
	test_data := []puzzle_input_1{
		{`...#......
.......#..
#.........
..........
......#...
.#........
.........#
..........
.......#..
#...#.....`, 374},
	}

	for _, datum := range test_data {
		result := Puzzle1(datum.input)

		if result != datum.result {
			t.Errorf("Puzzle1(%s) FAILED - Expected %d Got %d\n", datum.input, datum.result, result)
		} else {
			t.Logf("Puzzle1(%s) PASSED", datum.input)
		}
	}
}

func TestGridExpansion(t *testing.T) {
	test_data := []grid_expansion{
		{[][]string{
			{".", ".", ".", "#", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", "#", ".", "."},
			{"#", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
			{".", "#", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "#"},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", "#", ".", "."},
			{"#", ".", ".", ".", "#", ".", ".", ".", ".", "."},
		}, [][]string{
			{".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
			{"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "."},
			{".", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#"},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
			{"#", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", "."},
		}},
	}

	for _, datum := range test_data {
		result := GridExpansion(datum.input)

		if !IsEqual(result, datum.result) {
			t.Errorf("GridExpansion(%s) FAILED - Expected %s Got %s\n", datum.input, datum.result, result)
		} else {
			t.Logf("GridExpansion(%s) PASSED", datum.input)
		}
	}
}

func TestShortestPath(t *testing.T) {
	test_data := []shortest_path{
		{[][]string{
			{".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
			{"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "."},
			{".", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#"},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
			{"#", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", "."},
		}, coords{x: 0, y: 4}, coords{x: 10, y: 9}, 15},
		{[][]string{
			{".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
			{"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "."},
			{".", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#"},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
			{"#", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", "."},
		}, coords{x: 2, y: 0}, coords{x: 7, y: 12}, 17},
		{[][]string{
			{".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
			{"#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", ".", "."},
			{".", "#", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "#"},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", ".", "."},
			{".", ".", ".", ".", ".", ".", ".", ".", ".", "#", ".", ".", "."},
			{"#", ".", ".", ".", ".", "#", ".", ".", ".", ".", ".", ".", "."},
		}, coords{x: 11, y: 0}, coords{x: 11, y: 5}, 5},
	}

	for _, datum := range test_data {
		result := ShortestPath(datum.grid, datum.start, datum.end)

		if result != datum.result {
			t.Errorf("ShortestPath(%s, %d, %d) FAILED - Expected %d Got %d\n", datum.grid, datum.start, datum.end, datum.result, result)
		} else {
			t.Logf("ShortestPath(%s, %d, %d) PASSED", datum.grid, datum.start, datum.end)
		}
	}
}

func IsEqual(a [][]string, b [][]string) bool {
	if len(a) != len(b) {
		fmt.Println("return false")
		return false
	}
	for i := range a {
		if !reflect.DeepEqual(a[i], b[i]) {
			return false
		}
	}
	return true
}
